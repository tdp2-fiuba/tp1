openapi: 3.0.0
info:
  version: "1.0.1"
  title: The EucanUber API
  description: This is the API for the EucanUber app
externalDocs:
  url: https://app.swaggerhub.com/apis/nanovazquez/eucanuber/1.0.0

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/nanovazquez/eucanuber/1.0.1

paths:
  /users:
    get:
      description: Get users that match a specified criteria
      parameters:
        - in: query
          name: coordinate
          schema:
            type: string
          description: The point (in lat and long) where to center the search
          example: "-33.8696, 151.2094"
        - in: query
          name: radius
          schema:
            type: string
          description: The radius of the circunference of the search (in meters)
          example: "1000"
      responses:
        200:
          description: All drivers that match the criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        default:
          description: Unexpected error
    post:
      summary: Creates a new user
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/newPassengerData"
                - $ref: "#/components/schemas/newDriverData"
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/user"
                  - $ref: "#/components/schemas/driver"
        400:
          description: Invalid user data.
        default:
          description: Internal server error.

  /users/{id}:
    get:
      summary: Returns a user
      parameters:
        - id:
          $ref: "#/components/parameters/idParameter"
      responses:
        200:
          description: The user requested
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/user"
                  - $ref: "#/components/schemas/driver"
        400:
          description: The specified user ID is invalid (e.g. not a number).
        404:
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error
    put:
      summary: Updates a user
      parameters:
        - id:
          $ref: "#/components/parameters/idParameter"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/user"
                - $ref: "#/components/schemas/driver"
      responses:
        200:
          description: The user updated
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/user"
                  - $ref: "#/components/schemas/driver"
        400:
          description: The specified user ID is invalid (e.g. not a number).
        404:
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error
    delete:
      summary: Deletes a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the driver
      responses:
        201:
          description: Ok
        400:
          description: The specified user ID is invalid (e.g. not a number).
        404:
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error

  /users/{id}/position:
    get:
      summary: Gets the user current position
      parameters:
        - id:
          $ref: "#/components/parameters/idParameter"
      responses:
        200:
          description: The user current position (lat, long)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userPosition"

    put:
      summary: Updates the user current position
      parameters:
        - id:
          $ref: "#/components/parameters/idParameter"
      responses:
        200:
          description: The user new position (lat, long)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userPosition"

  /trips:
    post:
      summary: Create a new trip.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/trip"
      responses:
        200:
          description: OK.
        400:
          description: Invalid trip data.
        default:
          description: Internal server error.

  /trips/{id}:
    get:
      summary: Get trip by id.
      parameters:
        - id:
          $ref: "#/components/parameters/idParameter"
      responses:
        200:
          description: The new trip
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/trip"
        400:
          description: The specified trip ID is invalid (e.g. not a number).
        404:
          description: A trip with the specified ID was not found.
        default:
          description: Unexpected error.

components:
  # Reusable schemas (data models)
  schemas:
    newPassengerData:
      $ref: "#/components/schemas/user"
      properties:
        fbAuth:
          type: object
          properties:
            id:
              type: string
            token:
              type: string

    newDriverData:
      $ref: "#/components/schemas/newPassengerData"
      properties:
        license:
          type: object #file
        insurance:
          type: object #file
        car:
          $ref: "#/components/schemas/car"

    userPosition:
      properties:
        position:
          description: The position of the user (lat, long)
          type: string
          example: "-33.8696, 151.2094"

    trip:
      properties:
        id:
          type: string
        totalPets:
          type: integer
        price:
          type: string
        driver:
          properties:
            id:
              type: integer
        state:
          type: string
          enum: [Unconfirmed, PickUp, InProgress, Arrived]
        route:
          $ref: "#/components/schemas/tripRoute"

    tripRoute:
      properties:
        origin:
          type: string
        destination:
          type: string
        distance:
          description: Distance value between origin and destination (in meters)
          example: "100"

    userType:
      type: string
      enum: [Passenger, Driver]
      example: Passenger

    user:
      properties:
        id:
          type: string
          example: "4e994db0-d847-42fc-9929-e738c8aca2e3"
        userType:
          $ref: "#/components/schemas/userType"
        firstName:
          type: string
          example: Arthur
        lastName:
          type: string
          example: Dent
        rating:
          type: number
          example: 4.5
        position:
          type: string
          example: "-33.8696, 151.2094"

    driver:
      $ref: "#/components/schemas/user"
      properties:
        car:
          $ref: "#/components/schemas/car"
        isActive:
          description: If the driver accepts trips or not
          type: boolean

    car:
      properties:
        id:
          type: string
          example: "4e994db0-d847-42fc-9929-e738c8aca2e3"
        plate:
          type: string
          example: ABC123
        brand:
          type: string
          example: Tesla

  parameters:
    idParameter:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: The ID of the entity
